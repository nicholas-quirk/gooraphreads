;;This file autogenerated from 
;;
;;  src/cljx/c2/scale.cljx
;;
(ns c2.scale (:use-macros [c2.util :only [c2-obj]]) (:use [c2.maths :only [expt]]) (:require [c2.maths :as maths]))
(defprotocol IInvertable (invert [scale] "Inverted scale"))
(c2-obj linear {:domain [0 1], :range [0 1]} IFn (invoke [_ x] (let [domain-length (- (last domain) (first domain)) range-length (- (last range) (first range))] (+ (first range) (* range-length (/ (- x (first domain)) domain-length))))) IInvertable (invert [this] (assoc this :domain range :range domain)))
(declare log)
(c2-obj power {:domain [0 1], :range [0 1]} IFn (invoke [_ x] ((comp (linear :domain (map expt domain) :range range) expt) x)))
(c2-obj log {:domain [1 10], :range [0 1]} IFn (invoke [_ x] ((comp (linear :domain (map maths/log domain) :range range) maths/log) x)))